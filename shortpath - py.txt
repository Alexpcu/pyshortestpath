class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

class LinkedListQueue:
    def __init__(self):
        self.front = self.rear = None

    def is_empty(self):
        return self.front is None

    def enqueue(self, value):
        new_node = Node(value)
        if self.rear is None:
            self.front = self.rear = new_node
            return
        self.rear.next = new_node
        self.rear = new_node

    def dequeue(self):
        if self.is_empty():
            raise Exception("Queue is empty")
        temp = self.front
        self.front = temp.next
        if self.front is None:
            self.rear = None
        return temp.value

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, city1, city2, distance):
        if city1 not in self.graph:
            self.graph[city1] = []
        if city2 not in self.graph:
            self.graph[city2] = []
        self.graph[city1].append((city2, distance))
        self.graph[city2].append((city1, distance))

    def get_adjacent(self, vertex):
        return self.graph.get(vertex, [])

def bfs_find_path(graph, start_vertex, target_vertex):
    queue = LinkedListQueue()
    parents = {start_vertex: None}
    distances = {start_vertex: 0}

    queue.enqueue(start_vertex)

    while not queue.is_empty():
        current_vertex = queue.dequeue()

        for neighbor, distance in graph.get_adjacent(current_vertex):
            if neighbor not in parents:
                parents[neighbor] = current_vertex
                distances[neighbor] = distances[current_vertex] + distance
                queue.enqueue(neighbor)

            if neighbor == target_vertex:
                return reconstruct_path(parents, start_vertex, target_vertex), distances[target_vertex]

    return [], float('inf')

def reconstruct_path(parents, start_vertex, target_vertex):
    path = []
    step = target_vertex
    while step is not None:
        path.append(step)
        step = parents.get(step)
    path.reverse()
    return path if path[0] == start_vertex else []

# Main logic placed directly here
if __name__ == "__main__":
    cities = [
        "Prague", "Brno", "Ostrava", "Usti nad Labem", "Pilsen", "Olomouc",
        "Ceske Budejovice", "Liberec", "Pardubice", "Hradec Kralove",
        "Karlovy Vary", "Jihlava", "Mlada Boleslav", "Tabor", "Sumperk",
        "Strakonice", "Cesky Krumlov", "Benesov", "Trutnov", "Chomutov",
        "Klatovy", "Marianske Lazne", "Kutna Hora", "Znojmo", "Breclav", "Zlin", "Mohelnice"
    ]

    graph = Graph()

    edges = [
        ("Prague", "Pilsen", 90), ("Prague", "Hradec Kralove", 110), ("Prague", "Pardubice", 100),
        ("Prague", "Kutna Hora", 70), ("Prague", "Mlada Boleslav", 50), ("Prague", "Chomutov", 100),
        ("Prague", "Strakonice", 100), ("Prague", "Benesov", 40), ("Prague", "Jihlava", 130),
        ("Prague", "Usti nad Labem", 85), ("Brno", "Znojmo", 70), ("Brno", "Jihlava", 85),
        ("Brno", "Ostrava", 170), ("Brno", "Breclav", 50), ("Brno", "Olomouc", 80), 
	("Brno", "Zlin", 100), ("Ostrava", "Olomouc", 90), ("Usti nad Labem", "Chomutov", 50), 
	("Usti nad Labem", "Liberec", 100), ("Usti nad Labem", "Mlada Boleslav", 130), 
	("Pilsen", "Marianske Lazne", 50), ("Pilsen", "Karlovy Vary", 80), ("Pilsen", "Klatovy", 50), 
	("Pilsen", "Strakonice", 60), ("Pilsen", "Tabor", 130), ("Olomouc", "Sumperk", 50), 
	("Olomouc", "Zlin", 70), ("Olomouc", "Mohelnice", 35), ("Ceske Budejovice", "Tabor", 50), 
	("Ceske Budejovice", "Strakonice", 55), ("Ceske Budejovice", "Cesky Krumlov", 25), 
	("Liberec", "Mlada Boleslav", 80), ("Liberec", "Trutnov", 70), ("Liberec", "Hradec Kralove", 90), 
	("Pardubice", "Hradec Kralove", 20), ("Pardubice", "Kutna Hora", 55), ("Pardubice", "Jihlava", 110), 
	("Pardubice", "Mohelnice", 120), ("Hradec Kralove", "Mlada Boleslav", 80), ("Hradec Kralove", "Trutnov", 40), 
	("Karlovy Vary", "Marianske Lazne", 50), ("Jihlava", "Benesov", 90),
        ("Jihlava", "Tabor", 90), ("Jihlava", "Kutna Hora", 70), ("Mlada Boleslav", "Trutnov", 90), 
	("Tabor", "Benesov", 40), ("Sumperk", "Mohelnice", 20), ("Strakonice", "Klatovy", 50), 
	("Strakonice", "Tabor", 70), ("Trutnov", "Liberec", 70), ("Chomutov", "Karlovy Vary", 50), 
	("Kutna Hora", "Jihlava", 70), ("Znojmo", "Breclav", 80), ("Breclav", "Zlin", 75)
    ]

    for city1, city2, distance in edges:
        graph.add_edge(city1, city2, distance)

    print("Cities:")
    for city in cities:
        print(city)

    start = input("Enter the starting city: ")
    end = input("Enter the destination city: ")

    if start not in graph.graph or end not in graph.graph:
        print("Invalid city entered.")

    path, distance = bfs_find_path(graph, start, end)

    if distance == float('inf'):
        print(f"No path found from {start} to {end}.")
    else:
        print(f"The shortest path from {start} to {end} is {distance} km long and the path is: {' -> '.join(path)}")